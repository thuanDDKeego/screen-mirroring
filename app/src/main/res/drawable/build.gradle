plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'

    // <hilt>
    id 'com.google.dagger.hilt.android'
    // </hilt>
    // <google firebase & others>
    id 'com.google.devtools.ksp' version '1.7.20-1.0.7' // check to update with kotlin_version
    id 'com.google.gms.google-services'
    id 'com.google.firebase.firebase-perf'
    id 'com.google.firebase.crashlytics'
    // </google firebase & others>
    id 'applovin-quality-service' // TODO: move to sofi-ad
}
applovin {
    apiKey "V5UHiAh115VLQ71eicJR_InTwDfnDTkcZU56C8nR111COyQu_1ULUqbVPRST69e9ly0fIzCTLeCmk20lHVJa0y"
}

android {
    namespace 'net.sofigo.cast.tv'
    compileSdk 33

    defaultConfig {
        applicationId "sofi.stream.screenmirroring.chromecast.casttv.cast.tv"
        minSdk 24
        targetSdk 33
        compileSdkVersion 33
        versionCode 13
        versionName "1.0.4"
        resConfigs "en", "US"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion kotlin_compose_compiler_version
    }
    packagingOptions {
        jniLibs {
            excludes += ['META-INF/*', 'META-INF/licenses/*']
        }
        resources {
            excludes += ['META-INF/*', 'META-INF/licenses/*', '**/attach_hotspot_windows.dll', '/META-INF/{AL2.0,LGPL2.1}']
        }
    }

    // disable naming warning for @Composable
    lintOptions {
        disable 'ComposableNaming'
    }

    // under scripts helping Android Studio lookup for generated code from KSP & compose-destinations
    applicationVariants.all { variant ->
        kotlin.sourceSets {
            getByName(variant.name) {
                kotlin.srcDir("build/generated/ksp/${variant.name}/kotlin")
            }
        }
    }
}

dependencies {

    implementation(project(":Connect-SDK"))
    implementation(project(":extensions"))
    // sofi libs
    implementation "dev.sofi:setting:1.0.1"
    implementation "dev.sofi:ads:1.0.25"
//     implementation(project(":ads"))

    // <core androidx>
    // keep to date if possible
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.activity:activity-compose:1.6.1'
    implementation("androidx.startup:startup-runtime:1.1.1")
    implementation 'androidx.core:core-splashscreen:1.0.0'
    // </core>

    // <hilt>
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    // </hilt>

    // <compose>
    // Import the Compose BOM
    def composeBom = platform('androidx.compose:compose-bom:2022.10.00')
    implementation composeBom
    androidTestImplementation composeBom
    // get libraries here: https://developer.android.com/jetpack/compose/setup#bom-version-mapping

    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.ui:ui-tooling-preview"
    implementation "androidx.compose.material:material"
    implementation "androidx.compose.material:material-icons-core"
    implementation "androidx.compose.material:material-icons-extended"
    implementation "androidx.compose.material3:material3"
    implementation "androidx.compose.material3:material3-window-size-class"
    implementation "androidx.compose.animation:animation"
    implementation "androidx.compose.foundation:foundation"
    implementation "androidx.compose.runtime:runtime"
    implementation 'androidx.compose.runtime:runtime-livedata'
    // + compose navigation & hilt for it
    implementation "androidx.navigation:navigation-compose:2.5.3"
    implementation "androidx.hilt:hilt-navigation-compose:$hilt_compose_version"
    // + upgrade compose navigation with compose-destinations
    implementation 'io.github.raamcosta.compose-destinations:core:1.7.22-beta'
    ksp 'io.github.raamcosta.compose-destinations:ksp:1.7.22-beta'
    // </compose>

    // <accompanist>
    implementation("io.coil-kt:coil-compose:2.2.2")
    implementation "com.google.accompanist:accompanist-permissions:$accompanist_version"
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanist_version"
    implementation "com.google.accompanist:accompanist-pager:$accompanist_version"
    implementation "com.google.accompanist:accompanist-flowlayout:$accompanist_version"
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanist_version"
    // </accompanist>

    // <TEST>
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"
    // </TEST>

    // <logging>
    implementation "com.jakewharton.timber:timber:$timber_version"
    // </logging>

    // <room>
    implementation("androidx.room:room-runtime:$room_version")
    implementation("androidx.room:room-ktx:$room_version")
    annotationProcessor("androidx.room:room-compiler:$room_version")
    kapt("androidx.room:room-compiler:$room_version")
    // </room>

    // <firebase>
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation platform('com.google.firebase:firebase-bom:31.0.1')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-perf-ktx'
    implementation 'com.google.firebase:firebase-config-ktx'
    // </firebase>

    def ktor_version = '2.1.3'
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-server-cio:$ktor_version"
    implementation "io.ktor:ktor-server-call-logging:$ktor_version"
    implementation("io.ktor:ktor-server-partial-content:$ktor_version")
    implementation("io.ktor:ktor-server-auto-head-response:$ktor_version")
    implementation("io.ktor:ktor-server-cors:$ktor_version")

    // <chromecast>
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.mediarouter:mediarouter:1.3.1'
    implementation 'com.google.android.gms:play-services-cast-framework:21.2.0'
    // <chromecast/>

    // <Gson parser>
    implementation 'com.google.code.gson:gson:2.10'
    // <Gson parser>

    // google services
    implementation 'com.google.android.gms:play-services-ads-identifier:18.0.1'

    def billing_version = "5.0.0"
    //noinspection GradleDependency
    implementation "com.android.billingclient:billing-ktx:$billing_version"

    implementation 'com.github.HaarigerHarald:android-youtubeExtractor:master-SNAPSHOT'

    implementation 'com.google.firebase:firebase-messaging-ktx:23.1.0'

    //load animation
    implementation 'com.airbnb.android:lottie-compose:5.2.0'

    implementation 'com.github.a914-gowtham:compose-ratingbar:1.2.3'

    //in-app review
    // So, make sure you also include that repository in your project's build.gradle file.
    implementation 'com.google.android.play:asset-delivery:2.0.1'
    // For Kotlin users also add the Kotlin extensions library for Play Asset Delivery:
    implementation 'com.google.android.play:asset-delivery-ktx:2.0.1'
    // For Kotlin users, also add the Kotlin extensions library for Play In-App Review:
    implementation 'com.google.android.play:review-ktx:2.0.1'

    implementation 'org.jsoup:jsoup:1.13.1'
}